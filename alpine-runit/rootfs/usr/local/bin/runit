#!/usr/bin/env bash

#
# This is the runit entrypoint
#

# set -e : Exit the script if any statement returns a non-true return value.
# set -u : Exit the script when using uninitialised variable.
set -eu

# Add libraries
source /usr/local/lib/persist-env.sh

# Default values
progname=$(basename $0)
_runitinitid=1

# Main help message
if [ $# -lt 1 ]; then
    echo ""
    echo "$progname : Simple Service Manager for Runit"
    echo ""
    echo "Run  $progname help | to see how to list, start, stop Runit and much more."
    echo "Or   $progname service help | to see all actions possible for any services."
    echo ""
    exit 0
fi

# Actions allowed for runit
_runitactions="list start stop"
_serviceactions="enable disable start stop status reload restart up down once pause cont hup alarm interrupt 1 2 term kill exit shutdown force-stop force-reload force-restart force-shutdown"
_servicetpldir="/etc/service.d"
_servicedir="/etc/service"

getHelp() {
    cat << USAGE >&2

$progname : Simple Service Manager for Runit

Usage: $progname [OPTIONS]

    -h|--help|help              Get some help
    -l|--ls|--list|ls|list      Get list of installed services
    --start|start               Start Runit
    --stop|stop                 Stop Runit

    -s|--sv|--service|s|sv|service help : Get help for the $progname service command

USAGE
}

# Get the list of installed services
listServices() {
    echo "-- List of installed services:"
    if [ -n "$(ls -A ${_servicetpldir})" ]; then
        for _dir in ${_servicetpldir}/*; do
            if [ -d  ${_servicedir}/$(basename ${_dir}) ]; then
                echo "--   [x] $(basename ${_dir})"
            else
                echo "--   [ ] $(basename ${_dir})"
            fi
        done
    fi
    echo ""
}

# Check if runit is started
isStarted() {
    [ -n "$(getpidsbyname runsvdir 2>/dev/null)" ] && return 0 || return 1
}

# Start Runit
start() {
    # Exit if runit is already started
    isStarted && ( >&2 echo "runit is already started." && return 1 )
    # Run runit init wrapper
    exec /usr/local/bin/runit-init &
    # Get the last background process id
    _runitinitid=$!
    # Wait for the proccess to be killed
    while kill -0 $_runitinitid > /dev/null 2>&1; do
        wait
    done
}

# Stop Runit
stop() {
    # Exit if runit is not started
    isStarted || ( >&2 echo "Cannot stop runit has it is not started." && return 1 )
    # Get runit-init id
    _pid=$(getpidsbyname runit-init)
    # Kill it
    kill -SIGTERM $_pid
    # Wait for the proccess runit-init to finish
    waiton $_pid 2>/dev/null
}

# Display service help
getServiceHelp() {
    echo ""
    echo "$progname : Simple Service Manager for Runit"
    echo ""
    echo "Usage:"
    for _action in $_serviceactions; do
        echo "   $progname service <service_name> $_action"
    done
    echo ""
}

# Check if a service exist
serviceExist() {
    [ "$#" = 0 ] && return 2
    [ ! -d "${_servicetpldir}/$1" ] && return 1
    return 0
}

# Check if a service is enable
serviceIsEnable() {
    [ "$#" = 0 ] && return 2
    [ ! -d "${_servicedir}/$1" ] && return 1
    return 0
}

# Enable a service
serviceEnable() {
    [ "$#" = 0 ] && return 2
    # the service must exist
    serviceExist $1 || ( >&2 echo "Service \"$1\" doesn't exist." && return 1 )
    # the service must be disable
    serviceIsEnable $1 && ( >&2 echo "Service \"$1\" is already enabled." && return 1 )

    # Create symbolic link from /etc/service.d to /etc/service
    ln -sf ${_servicetpldir}/$1 ${_servicedir}

    # Info message
    echo "-- Service \"$1\" has been enabled."
}

# Enable a service
serviceDisable() {
    [ "$#" = 0 ] && return 2
    # the service must be enable
    serviceIsEnable $1 || ( >&2 echo "Service \"$1\" is not enabled." && return 1 )
    # Shut down the service
    sv down $1 || ( >&2 echo "Unable to shut down  \"$1\"." && return 1 )

    # Remove the symbolic link
    rm ${_servicedir}/$1

    # Info message
    echo "-- Service $1 has been disabled."
}

# Execute service action
serviceAction() {
    sv ${1} ${2}
}

# Shutdown function called on (Ctrl+C)
# However, this container should be launched
# using the start command
shutdown() {
    # Stop runit if it is started
    isStarted && runit stop
    # Kill any defunct or zombies processes
    killzb > /dev/null 2>&1
    # Last message
    echo "-- Container is successfully shut down!" >&2

    # Exit function - 128 + 15 -- SIGTERM
    exit 143;
}

# Catch shutdown signals
trap shutdown SIGTERM SIGINT SIGHUP


case "$1" in

    -h | --help | help)
        getHelp
    ;;

    -l | --ls | --list | ls | list)
        listServices
    ;;

    --start | start)
        start
    ;;

    --stop | stop)
        stop
    ;;

    -s | --sv | --service | s | sv | service)
        shift
        #
        if [ $# -eq 0 ]; then
            getServiceHelp
        #
        elif [ $# -eq 1 ]; then
            case "$1" in
            -h | --help | help)
                getServiceHelp
            ;;
            - | -- | *)
                echo "[Error] - $1 is not a supported action."
                echo "[Error] - Please run $progname for usage details."
            ;;
            esac
        #
        elif [ $# -eq 2 ]; then
            # Check the service
            _servicename=$1
            if [ ! -d "${_servicetpldir}/${_servicename}" ] || [ ! -e "${_servicetpldir}/${_servicename}/run" ]; then
                echo "[Error] - ${_servicename} is not a valid service name."
                echo "[Error] - Please run $progname list fot the full list of available services."
            else
                # Check the action
                _action=$2
                [ ${_action} == 'reload' ] && _action="force-${_action}"
                # Enable
                if [ ${_action} == 'enable' ]; then
                    serviceEnable ${_servicename}
                # Disable
                elif [ ${_action} == 'disable' ]; then
                    serviceDisable ${_servicename}
                # All other actions
                else
                    if echo "${_serviceactions}" | grep -iq "${_action}"; then
                        serviceAction ${_action} ${_servicename}
                    else
                        echo "[Error] - ${_action} is not a supported action."
                        echo "[Error] - Please run $progname for usage details."
                    fi
                fi
            fi
        elif [ $# -gt 2 ]; then
            echo "[Error] - Too many parameters."
            echo "[Error] - Please run $progname for usage details."
        fi
    ;;

    # By default excecute the command
    *)
        # Display the container banner
        cat /banner
        # Excecute the command
        exec "$@"
    ;;

esac

unset getHelp listServices isStarted start stop shutdown
unset getServiceHelp serviceExist serviceIsEnable serviceEnable serviceDisable
unset _runitactions _serviceactions _servicetpldir _servicetdir _dir
unset _runitinitid _servicename _action

exit 0
